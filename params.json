{"body":"# node-weibo [![Build Status](https://secure.travis-ci.org/fengmk2/node-weibo.png)](http://travis-ci.org/fengmk2/node-weibo)\r\n\r\nA [weibo](http://weibo.com)(like [twitter](http://twitter.com)) API SDK, use on browser client and nodejs server.\r\n\r\nPlease see the [API Documents](https://github.com/fengmk2/node-weibo/blob/master/api.md) first.\r\n\r\n## Supports APIs\r\n\r\n * weibo: [http://t.sina.com.cn/](http://weibo.com/)\r\n * github: [http://github.com](http://github.com), only `oauth` for now.\r\n * twitter(unavailable): [http://twitter.com/](http://twitter.com/)\r\n * facebook(unavailable): [http://facebook.com/](http://facebook.com/)\r\n * fanfou(unavailable): [http://fanfou.com/](http://fanfou.com/)\r\n * digu(unavailable): [http://digu.com/](http://digu.com/)\r\n * tqq: [http://t.qq.com/](http://t.qq.com/)\r\n * tsohu(unavailable): [http://t.sohu.com/](http://t.sohu.com/)\r\n * t163(unavailable): [http://t.163.com/](http://t.163.com/)\r\n * plurk(unavailable): [http://plurk.com/](http://plurk.com/)\r\n\r\n## Nodejs Install\r\n\r\n```bash\r\n$ npm install weibo\r\n```\r\n\r\n## How to use\r\n\r\nDemo on nodejs and browser just the same code.\r\n\r\nThanks for [browserify](https://github.com/substack/node-browserify),\r\nlet us to use the same code on nodejs and browser.\r\n\r\n### Browser: `Phonegap`, `Chrome extension` or [node-webkit](https://github.com/rogerwang/node-webkit).\r\n\r\nNOTICE: browser must enable **cross-domain** request.\r\n\r\n```js\r\n<script src=\"https://raw.github.com/fengmk2/node-weibo/master/weibo.js\"></script>\r\n<script>\r\nvar weibo = require('weibo');\r\n\r\n// change appkey to yours\r\nvar appkey = 'your appkey';\r\nvar secret = 'your app secret';\r\nvar oauth_callback_url = 'your callback url' || 'oob';\r\nweibo.init('tsina', appkey, secret, oauth_callback_url);\r\n\r\nvar user = { blogtype: 'tsina' };\r\nvar cursor = {count: 20};\r\nweibo.public_timeline(user, cursor, function (err, statuses) {\r\n  if (err) {\r\n    console.error(err);\r\n  } else {\r\n    console.log(statuses);\r\n  }\r\n});\r\n</script>\r\n```\r\n\r\n### Server\r\n\r\n```js\r\nvar weibo = require('weibo');\r\n\r\n// change appkey to yours\r\nvar appkey = 'your appkey';\r\nvar secret = 'your app secret';\r\nvar oauth_callback_url = 'your callback url' || 'oob';\r\nweibo.init('tsina', appkey, secret, oauth_callback_url);\r\n\r\nvar user = { blogtype: 'tsina' };\r\nvar cursor = {count: 20};\r\nweibo.public_timeline(user, cursor, function (err, statuses) {\r\n  if (err) {\r\n    console.error(err);\r\n  } else {\r\n    console.log(statuses);\r\n  }\r\n});\r\n```\r\n    \r\n### Use `weibo.oauth` middleware\r\n\r\nhandler oauth login middleware, use on connect, express.\r\n\r\n```js\r\n/**\r\n * oauth middleware for connect\r\n *\r\n * example:\r\n *\r\n *  connect(\r\n *    connect.query(),\r\n *    connect.cookieParser('I\\'m cookie secret.'),\r\n *    connect.session({ secret: \"oh year a secret\" }),\r\n *    weibo.oauth()\r\n *  );\r\n *\r\n * @param {Object} [options]\r\n *   - {String} [homeUrl], use to create login success oauth_callback url with referer header, \r\n *     default is `'http://' + req.headers.host`;\r\n *   - {String} [loginPath], login url, default is '/oauth'\r\n *   - {String} [logoutPath], default is '/oauth/logout'\r\n *   - {String} [callbackPath], default is login_path + '/callback'\r\n *   - {String} [blogtypeField], default is 'type', \r\n *       if you want to connect weibo, login url should be '/oauth?type=weibo'\r\n *   - {Function(req, res, callback)} [afterLogin], when oauth login success, will call this function.\r\n *   - {Function(req, res, callback)} [beforeLogout], will call this function before user logout.\r\n */\r\n```\r\n    \r\nExample: A simple web with oauth login.\r\n\r\n```js\r\nvar connect = require('connect');\r\nvar weibo = require('../');\r\n\r\n/**\r\n * init weibo api settings\r\n */ \r\n\r\nweibo.init('weibo', '$appkey', '$secret');\r\nweibo.init('tqq', '$appkey', '$secret');\r\nweibo.init('github', '$ClientID', '$ClientSecret');\r\n\r\n/**\r\n * Create a web application.\r\n */\r\n\r\nvar app = connect(\r\n  connect.query(),\r\n  connect.cookieParser('oh year a cookie secret'),\r\n  connect.session({ secret: \"oh year a secret\" }),\r\n  // using weibo.oauth middleware for use login\r\n  // will auto save user in req.session.oauthUser\r\n  weibo.oauth({\r\n    loginPath: '/login',\r\n    logoutPath: '/logout',\r\n    blogtypeField: 'type',\r\n    afterLogin: function (req, res, callback) {\r\n      console.log(req.session.oauthUser.screen_name, 'login success');\r\n      process.nextTick(callback);\r\n    },\r\n    beforeLogout: function (req, res, callback) {\r\n      console.log(req.session.oauthUser.screen_name, 'loging out');\r\n      process.nextTick(callback);\r\n    }\r\n  }),\r\n  connect.errorHandler({ stack: true, dump: true })\r\n);\r\n\r\napp.use('/', function (req, res, next) {\r\n  var user = req.session.oauthUser;\r\n  res.writeHeader(200, { 'Content-Type': 'text/html' });\r\n  if (!user) {\r\n    res.end('Login with <a href=\"/login?type=weibo\">Weibo</a> | \\\r\n      <a href=\"/login?type=tqq\">QQ</a> | \\\r\n      <a href=\"/login?type=github\">Github</a>');\r\n    return;\r\n  }\r\n  res.end('Hello, <img src=\"' + user.profile_image_url + '\" />\\\r\n    <a href=\"' + user.t_url + \r\n    '\" target=\"_blank\">@' + user.screen_name + '</a>. ' + \r\n    '<a href=\"/logout\">Logout</a>');\r\n});\r\n\r\napp.listen(8088);\r\nconsole.log('Server start on http://localhost:8088/');\r\n```\r\n\r\n## Authors\r\n\r\nBelow is the output from `git-summary`.\r\n\r\n```\r\n project: node-weibo\r\n commits: 119\r\n active : 55 days\r\n files  : 46\r\n authors: \r\n   108  fengmk2                 90.8%\r\n     7  hpf1908                 5.9%\r\n     2  QLeelulu                1.7%\r\n     1  mk2                     0.8%\r\n     1  xydudu                  0.8%\r\n```\r\n\r\n## License \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2011-2012 fengmk2 &lt;fengmk2@gmail.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","name":"node-weibo","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A [weibo](http://weibo.com)(like [twitter](http://twitter.com)) API SDK, use on browser client and nodejs server."}